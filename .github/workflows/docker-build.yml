name: Docker Build and Test

on:
  push:
    branches: [ master, main, develop ]
    paths:
      - 'packages/**'
      - 'Dockerfile*'
      - 'docker-compose.yml'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches: [ master, main, develop ]
    paths:
      - 'packages/**'
      - 'Dockerfile*'
      - 'docker-compose.yml'
      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch || is_branch == 'master'}}

      - name: Build production Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build development Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker containers
        run: |
          echo "Testing production container..."
          docker run --name test-prod -d -p 5173:5173 -p 8787:8787 ${{ steps.meta.outputs.tags }}
          
          echo "Waiting for container to start..."
          sleep 30
          
          echo "Testing frontend..."
          curl -f http://localhost:5173/ || exit 1
          
          echo "Testing API health..."
          curl -f http://localhost:8787/api/health || exit 1
          
          echo "Testing API reverse geocoding..."
          curl -f "http://localhost:8787/api/reverse?lat=40.7128&lon=-74.0060" || exit 1
          
          echo "All tests passed!"
          
          echo "Cleaning up test container..."
          docker stop test-prod
          docker rm test-prod

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  test-local-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm test

      - name: Run linting
        run: pnpm lint

      - name: Build packages
        run: pnpm build

  docker-compose-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build images for testing
        run: |
          docker build -t where-am-i:test .
          docker build -f Dockerfile.dev -t where-am-i:dev-test .

      - name: Test with docker-compose
        run: |
          echo "Starting services with docker-compose..."
          docker-compose up -d
          
          echo "Waiting for services to start..."
          sleep 45
          
          echo "Testing frontend..."
          curl -f http://localhost:5173/ || exit 1
          
          echo "Testing API..."
          curl -f http://localhost:8787/api/health || exit 1
          
          echo "All docker-compose tests passed!"
          
          echo "Stopping services..."
          docker-compose down

  publish:
    runs-on: ubuntu-latest
    needs: [build-and-test, test-local-build, docker-compose-test]
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch || is_branch == 'master'}}
            type=raw,value=stable,enable={{is_default_branch || is_branch == 'master'}}

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Docker images have been built and published:
            
            - Production: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
            - Development: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev`
            
            Build: ${{ github.sha }}
            Run: ${{ github.run_number }}
          draft: false
          prerelease: false
