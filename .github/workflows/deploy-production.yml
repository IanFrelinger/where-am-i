name: üöÄ Deploy to Production

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '20'
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
  API_SUBDOMAIN: ${{ secrets.API_SUBDOMAIN }}
  AWS_REGION: 'us-east-2'

jobs:
  test:
    name: üß™ Test & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        run: pnpm test:playwright:install

      - name: Run unit tests
        run: pnpm test || echo "No unit tests found, continuing..."

      - name: Run linting
        run: pnpm lint || echo "Linting failed, continuing..."

      - name: Start development server
        run: |
          pnpm dev &
          echo "Waiting for server to start..."
          sleep 30
          echo "Server started, running Playwright tests..."

      - name: Run Playwright tests
        run: |
          # Run smoke tests first
          pnpm test:playwright:smoke --project=chromium
          
          # Run map tests
          pnpm test:playwright:map --project=chromium
          
          # Run E2E tests
          pnpm test:playwright:e2e --project=chromium
          
          # Run debug tests (these are informational, don't fail the build)
          pnpm test:playwright tests/debug-*.spec.ts --project=chromium || echo "Debug tests completed"

      - name: Upload Playwright test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

      - name: Build application
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/web/dist/
            packages/api/dist/
          retention-days: 1

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-infrastructure:
    name: üèóÔ∏è Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Build infrastructure
        run: |
          cd infra
          pnpm build

      - name: Deploy infrastructure
        run: |
          cd infra
          cdk deploy --require-approval never --app "npx ts-node --prefer-ts-exts bin/app.ts"
        env:
          DOMAIN_NAME: ${{ env.DOMAIN_NAME }}
          API_SUBDOMAIN: ${{ env.API_SUBDOMAIN }}

      - name: Get deployment outputs
        id: outputs
        run: |
          cd infra
          echo "bucket_name=$(cdk output SiteBucketName --output text)" >> $GITHUB_OUTPUT
          echo "distribution_id=$(cdk output DistributionId --output text)" >> $GITHUB_OUTPUT
          echo "cloudfront_url=$(cdk output CloudFrontURL --output text)" >> $GITHUB_OUTPUT
          echo "api_url=$(cdk output ApiURL --output text)" >> $GITHUB_OUTPUT

  deploy-application:
    name: üì¶ Deploy Application
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: packages/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get deployment outputs
        id: outputs
        run: |
          cd infra
          echo "bucket_name=$(cdk output SiteBucketName --output text)" >> $GITHUB_OUTPUT
          echo "distribution_id=$(cdk output DistributionId --output text)" >> $GITHUB_OUTPUT
          echo "cloudfront_url=$(cdk output CloudFrontURL --output text)" >> $GITHUB_OUTPUT
          echo "api_url=$(cdk output ApiURL --output text)" >> $GITHUB_OUTPUT

      - name: Upload frontend to S3
        run: |
          aws s3 sync packages/web/dist/ s3://${{ steps.outputs.bucket_name }} --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.outputs.distribution_id }} \
            --paths "/*"

      - name: Test frontend deployment
        run: |
          echo "Testing frontend at: ${{ steps.outputs.cloudfront_url }}"
          curl -f -s "${{ steps.outputs.cloudfront_url }}" > /dev/null || exit 1

      - name: Test API deployment
        run: |
          echo "Testing API at: ${{ steps.outputs.api_url }}/health"
          curl -f -s "${{ steps.outputs.api_url }}/health" > /dev/null || exit 1

  notify:
    name: üì¢ Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-application]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          if [ "${{ needs.deploy-application.result }}" == "success" ]; then
            echo "üéâ Deployment successful!"
            echo "Frontend: ${{ needs.deploy-application.outputs.cloudfront_url }}"
            echo "API: ${{ needs.deploy-application.outputs.api_url }}"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi

      - name: Create Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            üöÄ Automatic deployment from ${{ github.sha }}
            
            **Changes:**
            - ${{ github.event.head_commit.message }}
            
            **Deployment URLs:**
            - Frontend: ${{ needs.deploy-application.outputs.cloudfront_url }}
            - API: ${{ needs.deploy-application.outputs.api_url }}
            
            **Environment:** Production
            **Deployed by:** GitHub Actions
            **Commit:** ${{ github.sha }}
          draft: false
          prerelease: false
