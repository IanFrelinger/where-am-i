name: 🧪 Playwright Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - smoke
        - map
        - e2e
        - debug

env:
  NODE_VERSION: '20'

jobs:
  test:
    name: 🧪 Run Playwright Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        run: pnpm test:playwright:install

      - name: Start development server
        run: |
          pnpm dev &
          echo "Waiting for server to start..."
          sleep 30
          echo "Server started, running Playwright tests..."

      - name: Run Playwright tests
        run: |
          case "${{ github.event.inputs.test_suite || 'all' }}" in
            "smoke")
              echo "Running smoke tests..."
              pnpm test:playwright:smoke --project=chromium
              ;;
            "map")
              echo "Running map tests..."
              pnpm test:playwright:map --project=chromium
              ;;
            "e2e")
              echo "Running E2E tests..."
              pnpm test:playwright:e2e --project=chromium
              ;;
            "debug")
              echo "Running debug tests..."
              pnpm test:playwright tests/debug-*.spec.ts --project=chromium
              ;;
            *)
              echo "Running all test suites..."
              # Run smoke tests first
              pnpm test:playwright:smoke --project=chromium
              
              # Run map tests
              pnpm test:playwright:map --project=chromium
              
              # Run E2E tests
              pnpm test:playwright:e2e --project=chromium
              
              # Run debug tests (these are informational, don't fail the build)
              pnpm test:playwright tests/debug-*.spec.ts --project=chromium || echo "Debug tests completed"
              ;;
          esac

      - name: Upload Playwright test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ github.run_number }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ github.run_number }}
          path: playwright-report/
          retention-days: 30

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              // Try to read test results
              const testResultsPath = path.join(process.env.GITHUB_WORKSPACE, 'test-results');
              if (fs.existsSync(testResultsPath)) {
                const files = fs.readdirSync(testResultsPath);
                const testFiles = files.filter(file => file.endsWith('.json'));
                
                let totalTests = 0;
                let passedTests = 0;
                let failedTests = 0;
                
                testFiles.forEach(file => {
                  try {
                    const content = JSON.parse(fs.readFileSync(path.join(testResultsPath, file), 'utf8'));
                    if (content.suites) {
                      content.suites.forEach(suite => {
                        suite.specs.forEach(spec => {
                          totalTests++;
                          if (spec.tests[0].results[0].status === 'passed') {
                            passedTests++;
                          } else {
                            failedTests++;
                          }
                        });
                      });
                    }
                  } catch (e) {
                    console.log(`Error parsing ${file}:`, e.message);
                  }
                });
                
                const comment = `## 🧪 Playwright Test Results
                
                **Test Suite:** ${{ github.event.inputs.test_suite || 'all' }}
                **Total Tests:** ${totalTests}
                **Passed:** ✅ ${passedTests}
                **Failed:** ❌ ${failedTests}
                **Success Rate:** ${totalTests > 0 ? Math.round((passedTests / totalTests) * 100) : 0}%
                
                📊 [View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
                
                ${failedTests > 0 ? '⚠️ Some tests failed. Please check the logs for details.' : '🎉 All tests passed!'}`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Error commenting on PR:', error.message);
            }
